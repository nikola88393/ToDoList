(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>i});var o=r(537),t=r.n(o),a=r(645),c=r.n(a)()(t());c.push([n.id,":root {\n    --primary-color: #50586C;\n    --secondary-color: #DCE2F0;\n    --accent-color: #66A182;\n    --main-cotanier-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n    --children-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    background-color: var(--accent-color);\n    color: var(--primary-color);\n}\n\n#container {\n    width: 90%;\n    border-radius: 30px;\n    background-color: var(--primary-color);\n    box-shadow: var(--children-shadow);\n}\n\n#header {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    padding: 10px 0px 10px 0px;\n    background-color: var(--secondary-color);\n    color: var(--primary-color);\n    /* ??? */\n    box-shadow: var(--children-shadow);\n}\n\n#appContainer {\n    display: flex;\n    padding: 30px;\n    gap: 30px;\n}\n\n#projectContainer {\n    height: 100%vh;\n    background-color: var(--secondary-color);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex: 1;\n    border-radius: 20px;\n    min-width: 120px;\n    padding: 20px;\n    box-shadow: var(--children-shadow);\n}\n\n#projectContainer h2 {\n    padding: 10px;\n}\n\n#projectList {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    width: 100%;\n    align-items: center;\n}\n\n.project {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n    border: 2px solid var(--secondary-color);\n    border-radius: 10px;\n    width: 80%;\n    font-size: 1.2rem;\n    cursor: pointer;\n}\n\n.project:hover,\n.project:active {\n    border: 2px solid var(--primary-color);\n    box-shadow: var(--children-shadow);\n}\n\n#taskContainer {\n    display: flex;\n    flex-direction: column;\n    flex: 4;\n    height: 80vh;\n    background-color: var(--secondary-color);\n    border-radius: 20px;\n    box-shadow: var(--children-shadow);\n    padding: 20px;\n    overflow: hidden;\n}\n\n#tasks {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    grid-gap: 20px;\n    /* overflow: scroll; */\n}\n\n.task {\n    padding: 10px;\n    border: 2px solid var(--primary-color);\n    background-color: var(--primary-color);\n    color: var(--secondary-color);\n    border-radius: 15px;\n    box-shadow: var(--children-shadow);\n}\n\n.task:hover {\n    border: 2px solid var(--accent-color);\n}\n\n#taskFormContainer,\n#projectFormContainer {\n    display: none;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,0BAA0B;IAC1B,uBAAuB;IACvB,mMAAmM;IACnM,8HAA8H;AAClI;;AAEA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,iBAAiB;IACjB,qCAAqC;IACrC,2BAA2B;AAC/B;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,sCAAsC;IACtC,kCAAkC;AACtC;;AAEA;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,0BAA0B;IAC1B,wCAAwC;IACxC,2BAA2B;IAC3B,QAAQ;IACR,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,SAAS;AACb;;AAEA;IACI,cAAc;IACd,wCAAwC;IACxC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,OAAO;IACP,mBAAmB;IACnB,gBAAgB;IAChB,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,aAAa;IACb,wCAAwC;IACxC,mBAAmB;IACnB,UAAU;IACV,iBAAiB;IACjB,eAAe;AACnB;;AAEA;;IAEI,sCAAsC;IACtC,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;IACP,YAAY;IACZ,wCAAwC;IACxC,mBAAmB;IACnB,kCAAkC;IAClC,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,2DAA2D;IAC3D,cAAc;IACd,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,sCAAsC;IACtC,6BAA6B;IAC7B,mBAAmB;IACnB,kCAAkC;AACtC;;AAEA;IACI,qCAAqC;AACzC;;AAEA;;IAEI,aAAa;AACjB",sourcesContent:[":root {\n    --primary-color: #50586C;\n    --secondary-color: #DCE2F0;\n    --accent-color: #66A182;\n    --main-cotanier-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n    --children-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    background-color: var(--accent-color);\n    color: var(--primary-color);\n}\n\n#container {\n    width: 90%;\n    border-radius: 30px;\n    background-color: var(--primary-color);\n    box-shadow: var(--children-shadow);\n}\n\n#header {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    padding: 10px 0px 10px 0px;\n    background-color: var(--secondary-color);\n    color: var(--primary-color);\n    /* ??? */\n    box-shadow: var(--children-shadow);\n}\n\n#appContainer {\n    display: flex;\n    padding: 30px;\n    gap: 30px;\n}\n\n#projectContainer {\n    height: 100%vh;\n    background-color: var(--secondary-color);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex: 1;\n    border-radius: 20px;\n    min-width: 120px;\n    padding: 20px;\n    box-shadow: var(--children-shadow);\n}\n\n#projectContainer h2 {\n    padding: 10px;\n}\n\n#projectList {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    width: 100%;\n    align-items: center;\n}\n\n.project {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n    border: 2px solid var(--secondary-color);\n    border-radius: 10px;\n    width: 80%;\n    font-size: 1.2rem;\n    cursor: pointer;\n}\n\n.project:hover,\n.project:active {\n    border: 2px solid var(--primary-color);\n    box-shadow: var(--children-shadow);\n}\n\n#taskContainer {\n    display: flex;\n    flex-direction: column;\n    flex: 4;\n    height: 80vh;\n    background-color: var(--secondary-color);\n    border-radius: 20px;\n    box-shadow: var(--children-shadow);\n    padding: 20px;\n    overflow: hidden;\n}\n\n#tasks {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    grid-gap: 20px;\n    /* overflow: scroll; */\n}\n\n.task {\n    padding: 10px;\n    border: 2px solid var(--primary-color);\n    background-color: var(--primary-color);\n    color: var(--secondary-color);\n    border-radius: 15px;\n    box-shadow: var(--children-shadow);\n}\n\n.task:hover {\n    border: 2px solid var(--accent-color);\n}\n\n#taskFormContainer,\n#projectFormContainer {\n    display: none;\n}"],sourceRoot:""}]);const i=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",o=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),o&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),o&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,o,t,a){"string"==typeof n&&(n=[[null,n,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(c[d]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);o&&c[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),r&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=r):s[2]=r),t&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=t):s[4]="".concat(t)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),t="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(t," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,o=0;o<e.length;o++)if(e[o].identifier===n){r=o;break}return r}function o(n,o){for(var a={},c=[],i=0;i<n.length;i++){var d=n[i],A=o.base?d[0]+o.base:d[0],s=a[A]||0,l="".concat(A," ").concat(s);a[A]=s+1;var p=r(l),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var C=t(u,o);o.byIndex=i,e.splice(i,0,{identifier:l,updater:C,references:1})}c.push(l)}return c}function t(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,t){var a=o(n=n||[],t=t||{});return function(n){n=n||[];for(var c=0;c<a.length;c++){var i=r(a[c]);e[i].references--}for(var d=o(n,t),A=0;A<a.length;A++){var s=r(a[A]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}a=d}}},569:n=>{var e={};n.exports=function(n,r){var o=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var o="";r.supports&&(o+="@supports (".concat(r.supports,") {")),r.media&&(o+="@media ".concat(r.media," {"));var t=void 0!==r.layer;t&&(o+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),o+=r.css,t&&(o+="}"),r.media&&(o+="}"),r.supports&&(o+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(o){var t=e[o];if(void 0!==t)return t.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var o in e)r.o(e,o)&&!r.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0,(()=>{var n=r(379),e=r.n(n),o=r(795),t=r.n(o),a=r(569),c=r.n(a),i=r(565),d=r.n(i),A=r(216),s=r.n(A),l=r(589),p=r.n(l),u=r(426),C={};C.styleTagTransform=p(),C.setAttributes=d(),C.insert=c().bind(null,"head"),C.domAPI=t(),C.insertStyleElement=s(),e()(u.Z,C),u.Z&&u.Z.locals&&u.Z.locals;const m=function(){let n=document.getElementById("addNewTask"),e=document.getElementById("addNewProject");const r=()=>{t();let n=document.getElementById("taskFormContainer");n.style.display="none"===window.getComputedStyle(n).display?"block":"none"},o=()=>{a();let n=document.getElementById("projectFormContainer");n.style.display="none"===window.getComputedStyle(n).display?"block":"none"};n.addEventListener("click",r),e.addEventListener("click",o);const t=()=>{document.getElementById("taskForm").reset()},a=()=>{document.getElementById("projectForm").reset()};return{displayProjectForm:o,displayTaskForm:r,getProjectInfo:()=>document.querySelector("#projectForm input").value,getTaskInfo:()=>({title:document.querySelector("#taskForm input").value,description:document.querySelector("#taskForm textarea").value,date:document.querySelector("#date").value,priority:document.querySelector("#priority").value}),setProjectSelectElement:()=>{let n=document.getElementById("projectName");n.innerHTML="";let e=g.getProjects();console.log(e),e.forEach((e=>{let r=document.createElement("option");r.value=e.getName(),r.innerHTML=e.getName(),n.appendChild(r)}))}}}(),x=m,g=function(){let n=[],e=[];document.getElementById("createProject").addEventListener("click",(()=>{let e={name:t=x.getProjectInfo(),getName:()=>t,renderProject:()=>{let n=document.getElementById("projectList"),e=document.createElement("a");e.classList.add("project"),e.innerHTML=t,n.appendChild(e)}};var t;n.push(e),x.setProjectSelectElement(),console.log(r()),o(),x.displayProjectForm()})),document.getElementById("createTask").addEventListener("click",(()=>{let n=x.getTaskInfo(),r=(o=n.title,a=n.description,c=n.date,i=n.priority,{title:o,description:a,date:c,priority:i,project:d="test",getTitle:()=>o,getDescription:()=>a,getDate:()=>c,getPriority:()=>i,getProject:()=>d,renderTask:()=>{let n=document.getElementById("tasks"),e=document.createElement("div");e.classList.add("task");let r=document.createElement("h3");r.innerHTML=o;let t=document.createElement("p");t.innerHTML=a;let d=document.createElement("p");d.innerHTML=c;let A=document.createElement("p");A.innerHTML=i,e.appendChild(r),e.appendChild(t),e.appendChild(d),e.appendChild(A),n.appendChild(e)}});var o,a,c,i,d;e.push(r),console.log(e),t(),x.displayTaskForm()}));const r=()=>n,o=()=>{document.getElementById("projectList").innerHTML="",n.forEach((n=>{n.renderProject()}))},t=()=>{document.getElementById("tasks").innerHTML="",e.forEach((n=>{n.renderTask()}))};return{getProjects:r,renderProjects:o,renderTasks:t,logArrays:()=>{console.log(n),console.log("-----------------"),console.log(e)}}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,